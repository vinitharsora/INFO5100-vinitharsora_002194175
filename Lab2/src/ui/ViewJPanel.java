/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.CarHistory;

/**
 *
 * @author vinithiteshharsora
 */
public class ViewJPanel extends javax.swing.JPanel {

    CarHistory history;
    boolean avail;
    boolean emc;
    /**
     * Creates new form ViewJPanel
     * @param history
     */
    public ViewJPanel(CarHistory history) {
        initComponents();
        this.history = history;
        populateTableCar();
        getLastFleetChangeLogtime();
        setFleetTime();
    

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableCar = new javax.swing.JTable();
        View = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        txtMinimumSeats = new javax.swing.JTextField();
        Expired = new javax.swing.JRadioButton();
        YearOfManufacturing = new javax.swing.JLabel();
        MinimumSeats = new javax.swing.JLabel();
        txtSerialNumber = new javax.swing.JTextField();
        txtManufacturer = new javax.swing.JTextField();
        FirstAvailablePassengerCar = new javax.swing.JLabel();
        txtCurrentlyAvailableCars = new javax.swing.JTextField();
        txtListOfCarsAvailableinaGivenCity = new javax.swing.JTextField();
        txtYearOfManufacturing = new javax.swing.JTextField();
        ListOfCarsAvailableinaGivenCity = new javax.swing.JLabel();
        ListOfCarsthathaveExpiredMaintenanceCertificate = new javax.swing.JLabel();
        Manufacturer = new javax.swing.JLabel();
        CurrentlyAvailableCars = new javax.swing.JLabel();
        txtModelNumber = new javax.swing.JTextField();
        NotExpired = new javax.swing.JRadioButton();
        CarManufacturersUsedUber = new javax.swing.JLabel();
        SerialNumber = new javax.swing.JLabel();
        txtCarManufacturersUsedUber = new javax.swing.JTextField();
        Yes = new javax.swing.JRadioButton();
        ModelNumber = new javax.swing.JLabel();
        No = new javax.swing.JRadioButton();
        Save = new javax.swing.JButton();
        LastFleetLogUpdate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1000, 1000));

        lblTitle.setFont(new java.awt.Font("Didot", 3, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(102, 102, 0));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View Car Details");

        TableCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Manufacturer", "Year of Manu.", "Model", "No. of Seatings", "Serial No.", "City", "Availability", "Maintenance Certificate", "Uber Used", "Available Car"
            }
        ));
        TableCar.setPreferredSize(new java.awt.Dimension(1250, 850));
        jScrollPane1.setViewportView(TableCar);
        if (TableCar.getColumnModel().getColumnCount() > 0) {
            TableCar.getColumnModel().getColumn(0).setPreferredWidth(100);
            TableCar.getColumnModel().getColumn(1).setPreferredWidth(100);
            TableCar.getColumnModel().getColumn(2).setPreferredWidth(125);
            TableCar.getColumnModel().getColumn(3).setPreferredWidth(100);
            TableCar.getColumnModel().getColumn(4).setPreferredWidth(100);
            TableCar.getColumnModel().getColumn(5).setPreferredWidth(100);
            TableCar.getColumnModel().getColumn(6).setPreferredWidth(100);
            TableCar.getColumnModel().getColumn(7).setPreferredWidth(200);
        }

        View.setText("Edit");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        txtMinimumSeats.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtMinimumSeats.setForeground(new java.awt.Color(102, 102, 0));

        Expired.setText("Expired");
        Expired.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Expired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpiredActionPerformed(evt);
            }
        });

        YearOfManufacturing.setText("Year Of Manufacturing:");

        MinimumSeats.setText("Minimum Seats:");

        txtSerialNumber.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtSerialNumber.setForeground(new java.awt.Color(102, 102, 0));

        txtManufacturer.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtManufacturer.setForeground(new java.awt.Color(102, 102, 0));

        FirstAvailablePassengerCar.setText("Available Car:");

        txtCurrentlyAvailableCars.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtCurrentlyAvailableCars.setForeground(new java.awt.Color(102, 102, 0));

        txtListOfCarsAvailableinaGivenCity.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtListOfCarsAvailableinaGivenCity.setForeground(new java.awt.Color(102, 102, 0));

        txtYearOfManufacturing.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtYearOfManufacturing.setForeground(new java.awt.Color(102, 102, 0));

        ListOfCarsAvailableinaGivenCity.setText("Cars Available in a Given City:");

        ListOfCarsthathaveExpiredMaintenanceCertificate.setText("Cars with Expired Maintenance Certificate:");

        Manufacturer.setText("Manufacturer:");

        CurrentlyAvailableCars.setText("Currently Available Cars:");

        txtModelNumber.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtModelNumber.setForeground(new java.awt.Color(102, 102, 0));
        txtModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumberActionPerformed(evt);
            }
        });

        NotExpired.setText("Not Expired");
        NotExpired.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NotExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NotExpiredActionPerformed(evt);
            }
        });

        CarManufacturersUsedUber.setText("Car Manufacturers Used Uber:");

        SerialNumber.setText("Serial Number:");

        txtCarManufacturersUsedUber.setFont(new java.awt.Font("Didot", 3, 14)); // NOI18N
        txtCarManufacturersUsedUber.setForeground(new java.awt.Color(102, 102, 0));

        Yes.setText("Yes");
        Yes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YesActionPerformed(evt);
            }
        });

        ModelNumber.setText("Model Number:");

        No.setText("No");
        No.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Updated Fleet Time:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FirstAvailablePassengerCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(YearOfManufacturing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CurrentlyAvailableCars, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                            .addComponent(ListOfCarsthathaveExpiredMaintenanceCertificate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ListOfCarsAvailableinaGivenCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CarManufacturersUsedUber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ModelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SerialNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MinimumSeats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Manufacturer, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Yes, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(No))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Expired, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NotExpired))
                            .addComponent(txtCarManufacturersUsedUber)
                            .addComponent(txtModelNumber)
                            .addComponent(txtSerialNumber)
                            .addComponent(txtMinimumSeats)
                            .addComponent(txtManufacturer)
                            .addComponent(txtYearOfManufacturing)
                            .addComponent(txtCurrentlyAvailableCars)
                            .addComponent(txtListOfCarsAvailableinaGivenCity)
                            .addComponent(LastFleetLogUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(369, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
                            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Save)
                        .addGap(75, 75, 75)
                        .addComponent(View)
                        .addGap(75, 75, 75)
                        .addComponent(Delete)
                        .addGap(75, 75, 75))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Delete, Save, View});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Expired, Yes});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {No, NotExpired});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(View)
                    .addComponent(Delete)
                    .addComponent(Save))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FirstAvailablePassengerCar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Yes, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(No, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrentlyAvailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCurrentlyAvailableCars, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(YearOfManufacturing, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtYearOfManufacturing, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Manufacturer)
                    .addComponent(txtManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MinimumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinimumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CarManufacturersUsedUber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCarManufacturersUsedUber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ListOfCarsAvailableinaGivenCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtListOfCarsAvailableinaGivenCity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ListOfCarsthathaveExpiredMaintenanceCertificate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Expired, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(NotExpired, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LastFleetLogUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Save, View});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CurrentlyAvailableCars, txtCurrentlyAvailableCars});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {LastFleetLogUpdate, txtListOfCarsAvailableinaGivenCity});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ListOfCarsthathaveExpiredMaintenanceCertificate, jLabel1});

    }// </editor-fold>//GEN-END:initComponents

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = TableCar.getSelectedRow();
        
        if (selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) TableCar.getModel();
        Car selectedCar = (Car) model.getValueAt(selectedRowIndex, 0);
        
        history.deleteCar(selectedCar);
        JOptionPane.showMessageDialog(this, "Car Details deleted.");
        populateTableCar();
        
    }//GEN-LAST:event_DeleteActionPerformed

    private void ExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpiredActionPerformed
        // TODO add your handling code here:
        if(Expired.isSelected())
        {
            NotExpired.setSelected(false);
            emc = true;
        }
//
    }//GEN-LAST:event_ExpiredActionPerformed

    private void NotExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NotExpiredActionPerformed
//        // TODO add your handling code here:
        if(NotExpired.isSelected())
        {
            Expired.setSelected(false);
            emc = false;
        }

    }//GEN-LAST:event_NotExpiredActionPerformed

    private void YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YesActionPerformed
        // TODO add your handling code here:
        if(Yes.isSelected())
        {
            No.setSelected(false);
            avail = true;
        }

    }//GEN-LAST:event_YesActionPerformed

    private void NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoActionPerformed
        // TODO add your handling code here:
        if(No.isSelected())
        {
            Yes.setSelected(false);
            avail = false;
        }

    }//GEN-LAST:event_NoActionPerformed

    private void txtModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumberActionPerformed

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = TableCar.getSelectedRow();

        if (selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Please select a row to Edit.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) TableCar.getModel();
        Car selectedCar = (Car) model.getValueAt(selectedRowIndex, 0);
        

        txtManufacturer.setText(selectedCar.getManufacturer());
        txtSerialNumber.setText(selectedCar.getSerialNumber());
        txtModelNumber.setText(selectedCar.getModelNumber());
        txtCarManufacturersUsedUber.setText(selectedCar.getCarManufacturersUsedUber());
        txtListOfCarsAvailableinaGivenCity.setText(selectedCar.getListOfCarsAvailableinaGivenCity());
        txtCurrentlyAvailableCars.setText(String.valueOf(selectedCar.getCurrentlyAvailableCars()));
        txtYearOfManufacturing.setText(String.valueOf(selectedCar.getYearOfManufacturing()));
        txtMinimumSeats.setText(String.valueOf(selectedCar.getMinimumSeats()));
//        txtLastTimeFleetlogUpdated.setText(String.valueOf(selectedCar.getLastTimeFleetlogUpdated()));
//        No.setText(String.valueOf(selectedCar.isAvailableCar()));
//        No.setSelected(selectedCar.isAvailableCar());
//        Yes.setSelected(selectedCar.isAvailableCar()));
//        Expired.setText(String.valueOf(selectedCar.isListOfCarsthathaveExpiredMaintenanceCertificate()));
//        NotExpired.setText(String. valueOf(selectedCar.isListOfCarsthathaveExpiredMaintenanceCertificate()));
            if(selectedCar.isAvailableCar()){
            Yes.setSelected(true);
            No.setSelected(false);
            }
            if(!selectedCar.isAvailableCar()){
            No.setSelected(true);
            Yes.setSelected(false);
            }
            if(selectedCar.isListOfCarsthathaveExpiredMaintenanceCertificate()){
            NotExpired.setSelected(true);
            Expired.setSelected(false);
            }
            if(!selectedCar.isListOfCarsthathaveExpiredMaintenanceCertificate()){
            Expired.setSelected(true);
            NotExpired.setSelected(false);
            }
        
    }//GEN-LAST:event_ViewActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = TableCar.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) TableCar.getModel();
        System.out.println(model.getValueAt(selectedRowIndex, 0));
        Car car = (Car) model.getValueAt(selectedRowIndex , 0);
//        txtManufacturer.setText(car.getManufacturer());
        car.setSerialNumber(Manufacturer.getText());
//            txtYearOfManufacturing.setText(Integer.toString(car.getYearOfManufacturing()));
        car.setYearOfManufacturing(Integer.parseInt(txtYearOfManufacturing.getText()));
//            txtMinimumSeats.setText(Integer.toString(car.getMinimumSeats()));
        car.setMinimumSeats(Integer.parseInt(txtMinimumSeats.getText()));
//            txtModelNumber.setText(car.getModelNumber());
        car.setModelNumber(txtModelNumber.getText());
//            txtSerialNumber.setText(car.getSerialNumber());
        car.setSerialNumber(txtSerialNumber.getText());
//            txtCurrentlyAvailableCars.setText(Integer.toString(car.getCurrentlyAvailableCars()));
        car.setCurrentlyAvailableCars(Integer.parseInt(txtCurrentlyAvailableCars.getText()));
//            txtCarManufacturersUsedUber.setText(car.getCarManufacturersUsedUber());
        car.setCarManufacturersUsedUber(txtCarManufacturersUsedUber.getText());
//            txtLastTimeFleetlogUpdated.setText(Integer.toString(car.getLastTimeFleetlogUpdated()));
//        car.setLastTimeFleetlogUpdated(Integer.parseInt(txtLastTimeFleetlogUpdated.getText()));
            No.setText(Boolean.toString(car.isAvailableCar()));
            Yes.setText(Boolean.toString(car.isAvailableCar()));
            Expired.setText(Boolean.toString(car.isListOfCarsthathaveExpiredMaintenanceCertificate()));
            NotExpired.setText(Boolean.toString(car.isListOfCarsthathaveExpiredMaintenanceCertificate()));
//            txtListOfCarsAvailableinaGivenCity.setText(car.getListOfCarsAvailableinaGivenCity());
        car.setListOfCarsAvailableinaGivenCity(txtListOfCarsAvailableinaGivenCity.getText());
            

//        car.setCity(txtListOfCarsAvailableinaGivenCity.getText());
//        System.out.println(txtVCity.getText());
         history.getHistory().set(selectedRowIndex, car);
         
         populateTableCar();
         getLastFleetChangeLogtime();
         setFleetTime();
    }//GEN-LAST:event_SaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CarManufacturersUsedUber;
    private javax.swing.JLabel CurrentlyAvailableCars;
    private javax.swing.JButton Delete;
    private javax.swing.JRadioButton Expired;
    private javax.swing.JLabel FirstAvailablePassengerCar;
    private javax.swing.JLabel LastFleetLogUpdate;
    private javax.swing.JLabel ListOfCarsAvailableinaGivenCity;
    private javax.swing.JLabel ListOfCarsthathaveExpiredMaintenanceCertificate;
    private javax.swing.JLabel Manufacturer;
    private javax.swing.JLabel MinimumSeats;
    private javax.swing.JLabel ModelNumber;
    private javax.swing.JRadioButton No;
    private javax.swing.JRadioButton NotExpired;
    private javax.swing.JButton Save;
    private javax.swing.JLabel SerialNumber;
    private javax.swing.JTable TableCar;
    private javax.swing.JButton View;
    private javax.swing.JLabel YearOfManufacturing;
    private javax.swing.JRadioButton Yes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtCarManufacturersUsedUber;
    private javax.swing.JTextField txtCurrentlyAvailableCars;
    private javax.swing.JTextField txtListOfCarsAvailableinaGivenCity;
    private javax.swing.JTextField txtManufacturer;
    private javax.swing.JTextField txtMinimumSeats;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtSerialNumber;
    private javax.swing.JTextField txtYearOfManufacturing;
    // End of variables declaration//GEN-END:variables

    private void populateTableCar() {
        DefaultTableModel model = (DefaultTableModel) TableCar.getModel();
        model.setRowCount(0);
        
        for (Car car : history.getHistory())
        {
            Object [] row = new Object [10];
            row[0] = car;
            row[1] = car.getYearOfManufacturing();
            row[2] = car.getModelNumber();
            row[3] = car.getMinimumSeats();
            row[4] = car.getSerialNumber();
            row[5] = car.getListOfCarsAvailableinaGivenCity();
            row[6] = car.getCurrentlyAvailableCars();
            row[7] = car.isListOfCarsthathaveExpiredMaintenanceCertificate();
            row[8] = car.getCarManufacturersUsedUber();         
            row[9] = car.isAvailableCar();
//            row[10] = car.getLastTimeFleetlogUpdated();
            
            model.addRow(row);
            
        }
    }
    
//    private void getLastFleetChangeLogtime(){
//        ;
//    }

    private void getLastFleetChangeLogtime() {
        LastFleetLogUpdate.setText(history.getDate());
                }
    
    private void setFleetTime()
    {
        Date today = new Date();
        history.setDate(today.toString());
    }
}
